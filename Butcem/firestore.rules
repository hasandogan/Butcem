rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Temel yardımcı fonksiyonlar
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(data) {
      return isAuthenticated() && data.userId == request.auth.uid;
    }
    
    // Aile bütçesi kontrol fonksiyonları
    function isBudgetMember(budgetData) {
      return request.auth.token.email in budgetData.members[].email;
    }
    
    function isBudgetAdmin(budgetData) {
      return budgetData.members.hasAny([{
        email: request.auth.token.email,
        role: 'admin'
      }]);
    }

    // Users koleksiyonu kuralları
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data);
    }

    // Transactions koleksiyonu kuralları
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && isOwner(resource.data);
      allow create: if isAuthenticated() && isOwner(request.resource.data);
      allow update, delete: if isAuthenticated() && isOwner(resource.data);
    }
    
    // Budgets koleksiyonu kuralları
    match /budgets/{budgetId} {
      allow read: if isAuthenticated() && isOwner(resource.data);
      allow create: if isAuthenticated() && isOwner(request.resource.data);
      allow update, delete: if isAuthenticated() && isOwner(resource.data);
    }
    
    // Aile bütçesi kuralları
    match /familyBudgets/{budgetId} {
      // Okuma: Üye olan herkes okuyabilir
      allow read: if isAuthenticated() && (
        isBudgetMember(resource.data)
      );
      
      // Oluşturma: Giriş yapmış herkes oluşturabilir
      allow create: if isAuthenticated();
      
      // Güncelleme: Admin veya oluşturucu güncelleyebilir
      allow update: if isAuthenticated() && (
        isBudgetAdmin(resource.data) || 
        resource.data.creatorId == request.auth.uid
      );
      
      // Silme: Sadece oluşturucu silebilir
      allow delete: if isAuthenticated() && resource.data.creatorId == request.auth.uid;
      
      // Alt koleksiyonlar için kurallar
      match /transactions/{transactionId} {
        // Okuma ve yazma: Bütçe üyesi olan herkes
        allow read, write: if isAuthenticated() && (
          isBudgetMember(get(/databases/$(database)/documents/familyBudgets/$(budgetId)).data)
        );
      }
    }
    
    // Bütçe davetleri kuralları
    match /budgetInvitations/{invitationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() && resource.data.invitedBy == request.auth.token.email;
    }
    
    // Financial Goals koleksiyonu kuralları
    match /financial_goals/{goalId} {
      allow read: if isAuthenticated() && isOwner(resource.data);
      allow create: if isAuthenticated() && isOwner(request.resource.data);
      allow update, delete: if isAuthenticated() && isOwner(resource.data);
    }
    
    // Recurring Transactions koleksiyonu kuralları
    match /recurring_transactions/{recurringId} {
      allow read: if isAuthenticated() && isOwner(resource.data);
      allow create: if isAuthenticated() && isOwner(request.resource.data);
      allow update, delete: if isAuthenticated() && isOwner(resource.data);
    }
    
    // Kategori limitleri koleksiyonu kuralları
    match /categoryLimits/{limitId} {
      allow read: if isAuthenticated() && isOwner(resource.data);
      allow create: if isAuthenticated() && isOwner(request.resource.data);
      allow update, delete: if isAuthenticated() && isOwner(resource.data);
    }
    
    // Bildirim ayarları koleksiyonu kuralları
    match /notificationSettings/{settingId} {
      allow read: if isAuthenticated() && isOwner(resource.data);
      allow create: if isAuthenticated() && isOwner(request.resource.data);
      allow update, delete: if isAuthenticated() && isOwner(resource.data);
    }
    
    // UserSettings koleksiyonu için kurallar
    match /userSettings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
} 